"""
This script visualizes the results of a parameter sweep experiment.

It takes a CSV file generated by `scripts/run_entropy.py` and creates a
facet grid of plots. Each plot shows the mean ILP entropy versus letter
position, with separate lines for different word lengths, faceted by the
`drop_left` and `drop_right` parameters.
"""
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os


def plot_results(run_directory: str):
    """
    Loads results from a specified run directory and saves a visualization
    in the same directory.
    """
    input_csv = os.path.join(run_directory, 'results.csv')
    output_plot = os.path.join(run_directory, 'plot.png')

    print(f"\n--- Generating Visualization from {input_csv} ---")
    try:
        df = pd.read_csv(input_csv)
    except FileNotFoundError:
        print(f"Error: Could not find the results file at {input_csv}")
        return

    # Add a 'length' column derived from the 'word' column.
    if 'word' in df.columns:
        df['length'] = df['word'].str.len()
    else:
        print("Error: 'word' column not found in the results file. Cannot determine word length.")
        return

    # Round drop parameters for cleaner plot titles
    df['drop_left'] = df['drop_left'].round(2)
    df['drop_right'] = df['drop_right'].round(2)

    # Set up the plot theme
    sns.set_theme(style="whitegrid")

    # We will average the entropy for each letter position ('pos') across all
    # words of the same length, but keep the drop parameters separate for the grid.
    print("Aggregating data for plotting...")
    df_agg = df.groupby(['drop_left', 'drop_right', 'length', 'pos'])['entropy'].mean().reset_index()

    # Create a facet grid of line plots
    g = sns.relplot(
        data=df_agg,
        x='pos',
        y='entropy',
        hue='length',
        col='drop_right',
        row='drop_left',
        kind='line',
        palette='viridis',
        legend='full',
        height=3,
        aspect=1.5
    )

    g.fig.suptitle("Mean ILP Entropy vs. Position", y=1.03, fontsize=16, fontweight="bold")
    g.set_axis_labels("Letter Position", "Mean ILP Entropy (bits)")
    if g.legend:
        g.legend.set_title("Word Length")

    # Adjust layout to make room for the main title
    g.fig.tight_layout(rect=(0, 0, 1, 0.97))

    # Save the plot
    # Ensure output directory exists
    output_dir = os.path.dirname(output_plot)
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)
        
    plt.savefig(output_plot, dpi=300, bbox_inches='tight')
    print(f"Visualization saved to {output_plot}")
    plt.close(g.fig) # Close the figure to free memory


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Visualize run results from a directory.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "run_directory",
        type=str,
        help="Path to the directory containing the run's results.csv file."
    )
    args = parser.parse_args()

    plot_results(args.run_directory) 